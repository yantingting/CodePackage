setwd('C:/Users/HP/Desktop/埋点')

library(creditmodel)
library(data.table)
library(dplyr)
library(readxl)
options(scipen = 200)

data_dc <- as.data.frame(fread('data_dc.csv', encoding = 'UTF-8')) #数据
flag_dc <- as.data.frame(fread('C:/Users/HP/Desktop/anti_fraud/dc/loan_flag_dc.csv', encoding = 'UTF-8')) #数据
flag_dc$customer_id <- as.character(gsub('^cp', '', flag_dc$customer_id))

device <- remove_duplicated(data_dc[,c('customer_id','os')],obs_id = 'customer_id')

name_screen <- as.data.frame(read_excel('name_list.xlsx',sheet=2)) #替换变量名
name_event <- as.data.frame(read_excel('name_list.xlsx', sheet = 1)) #替换变量名
dc_applytime <- as.data.frame(fread('dc_applytime.csv', encoding = 'UTF-8')) #读取申请时间
data_dc$customer_id <- as.character(data_dc$customer_id) 
dc_applytime$customer_id <- as.character(dc_applytime$customer_id)
data_dc <- data_dc[-6] %>% merge(dc_applytime,by='customer_id',all.x=TRUE) %>% subset(customer_id!=1)#删除第一个测试用户

data_dc$create_time1 <- paste0(substr(data_dc$create_time, 1, 4), '/', substr(data_dc$create_time, 5, 6), '/', substr(data_dc$create_time, 7, 8),' ',substr(data_dc$create_time, 9, nchar(data_dc$create_time)))
data_dc$create_time1 <- as.POSIXct(data_dc$create_time1, format = "%Y/%m/%d %H:%M:%S ")
data_dc$created_time <- gsub('-', '/', data_dc$created_time)
data_dc$created_time <- as.POSIXct(data_dc$created_time, format = "%Y/%m/%d %H:%M:%S ")
data_dc1 <- subset(data_dc, created_time > create_time1&year(data_dc$create_time1)!='1970')
data_dc1 <- select(data_dc1, customer_id, event_id, screen_path, time)
data_dc1$time1 <- as.numeric(as.character(data_dc1$time))
colnames(name_event) <- c('ori_value','code')
colnames(name_screen) <- c('ori_value', 'code')
data_dc1$event_id <- creditmodel::re_code(data_dc1$event_id, name_event)
data_dc1$screen_path <- creditmodel::re_code(data_dc1$screen_path, name_screen)
data_dc1$screen_path <- ifelse(data_dc1$screen_path == '', 'other', data_dc1$screen_path)

tongji_dc1 <- data_dc1 %>% group_by(customer_id) %>% arrange(time1) %>% mutate(time_interval = dplyr::lead(time1, default = max(time1, na.rm = TRUE)) - time1) %>% ungroup()

tongji_dc2 <- tongji_dc1 %>% group_by(customer_id, event_id) %>% add_count(customer_id) %>% mutate(event_sum_interval = sum(time_interval, na.rm = TRUE), event_min_interval = min(time_interval, na.rm = TRUE), event_avg_interval = mean(time_interval, na.rm = TRUE), event_max_interval = max(time_interval, na.rm = TRUE), e_n = n) %>% ungroup() %>%
    group_by(customer_id, screen_path) %>% add_count(customer_id) %>% mutate(screen_sum_interval = sum(time_interval), screen_min_interval = min(time_interval), screen_avg_interval = mean(time_interval), screen_max_interval = max(time_interval), s_n = n) %>% select(customer_id, screen_path, event_id, event_sum_interval, event_max_interval, event_avg_interval, event_min_interval, e_n, screen_sum_interval, screen_max_interval, screen_avg_interval, screen_min_interval, s_n) %>% distinct() %>% ungroup()

#转置----------------------------------------------------------------------
#转置screen
new_data_n <- data.table::dcast(tongji_dc2, customer_id ~ screen_path, fun = max, value.var = 's_n')
colnames(new_data_n)[-1] <- paste0(colnames(new_data_n)[-1], '_screen_n')
new_data_max <- data.table::dcast(tongji_dc2, customer_id ~ screen_path, fun = max, value.var = 'screen_max_interval')
colnames(new_data_max)[-1] <- paste0(colnames(new_data_max)[-1], '_screen_max')
new_data_avg <- data.table::dcast(tongji_dc2, customer_id ~ screen_path, fun = max, value.var = 'screen_avg_interval')
colnames(new_data_avg)[-1] <- paste0(colnames(new_data_avg)[-1], '_screen_avg')
new_data_min <- data.table::dcast(tongji_dc2, customer_id ~ screen_path, fun = max, value.var = 'screen_min_interval')
colnames(new_data_min)[-1] <- paste0(colnames(new_data_min)[-1], '_screen_min')
#转置event
event_data_n <- data.table::dcast(tongji_dc2, customer_id ~ event_id, fun = max, value.var = 's_n')
colnames(event_data_n)[-1] <- paste0(colnames(event_data_n)[-1], '_event_n')
event_data_max <- data.table::dcast(tongji_dc2, customer_id ~ event_id, fun = max, value.var = 'event_max_interval')
colnames(event_data_max)[-1] <- paste0(colnames(event_data_max)[-1], '_event_max')
event_data_avg <- data.table::dcast(tongji_dc2, customer_id ~ event_id, fun = max, value.var = 'event_avg_interval')
colnames(event_data_avg)[-1] <- paste0(colnames(event_data_avg)[-1], '_event_avg')
event_data_min <- data.table::dcast(tongji_dc2, customer_id ~ event_id, fun = max, value.var = 'event_min_interval')
colnames(event_data_min)[-1] <- paste0(colnames(event_data_min)[-1], '_event_min')

#拼宽表
new_data_n, new_data_max, new_data_avg, new_data_min,
data_all = multi_left_jion(list(event_data_n, event_data_max, event_data_avg, event_data_min), by = 'customer_id')
#拼上日期和设备
device$customer_id <- as.character(device$customer_id)
data_all <- inner_join(flag_dc[flag_dc$flag == 0 | flag_dc$flag == 1 | flag_dc$flag == -1, c('flag', 'customer_id', 'effective_date')], data_all, by = 'customer_id') %>% left_join(device, 'customer_id')
data_all$flag <- ifelse(data_all$flag == -1, 0, data_all$flag)
data_all[data_all == -Inf] <- -1

